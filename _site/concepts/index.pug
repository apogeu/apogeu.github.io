extends ../../_layouts/default

block title
    +title('Concepts')

block content
    .concepts
        .menu-centered
            ul.menu
                li.active
                    a(href="/concepts") Concepts
                li
                    a(href="/structure") App structure
                li
                    a(href="/technology") Technology

        .row.collapse
            .medium-3.columns
                ul#concepts-tabs.tabs.vertical(data-tabs data-deep-link="true")
                    li.tabs-title.is-active
                        a(href="#models") Models
                    li.tabs-title
                        a(href="#services") Services
                    li.tabs-title
                        a(href="#controllers") Controllers
                    li.tabs-title
                        a(href="#middlewares") Middlewares
                    li.tabs-title
                        a(href="#routes") Routes
                    li.tabs-title
                        a(href="#scaffold") Scaffold
                    li.tabs-title
                        a(href="#tests") Tests

            .medium-9.columns
                .tabs-content.vertical(data-tabs-content="concepts-tabs")
                    #models.tabs-panel.is-active
                        h4 Models
                        p A model module fulfills the #[b M] in the #[a(href="https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller") Model View Controller] (#[b M]VC) pattern and represents a persistent entity that is mapped onto an underlying database. In Apogeu a model is a module with a plural name convention and lives in the #[code app/models] directory.
                        p Models don't need to be required, just use #[code UserModel] wherever you want.
                        p A model can be created with the #[code apogeu model model_name] command:
                        pre
                            code.bash $ apogeu create model user
                        p Create the #[code app/models/user.js] module
                        pre
                            code.javascript
                                | const mongoose = require('mongoose');
                                | const Schema = mongoose.Schema;
                                | const UserModel = new Schema({
                                | });
                                | module.exports = mongoose.model('User', UserModel);


                    #services.tabs-panel
                        h4 Services
                        p A service contains business logic that can be reused across a Apogeu application. In Apogeu, a service is a module with a plural name that ends in the "Service" convention and lives in the #[code app/services] directory.
                        p Services don't need to be required, just use #[code UsersService] wherever you want.
                        p A service can be created with the #[code apogeu create service model_name] command:
                        pre
                            code.bash $ apogeu create service user
                        p Create the #[code app/services/users.js] module
                        pre
                            code.javascript
                                | const UsersService = {
                                | };
                                | module.exports = UsersService;

                    #controllers.tabs-panel
                        h4 Controllers
                        p A controller fulfills the #[b C] in the #[a(href="https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller") Model View Controller] (MV#[b C]) pattern and is responsible for handling web requests. In Apogeu, a service is a module with a plural name that ends in the "Controller" convention and lives in the #[code app/controllers] directory.
                        p Controllers don't need to be required, just use #[code UsersController] wherever you want.
                        p A controller can be created with the  #[code apogeu create controller model_name] command:
                        pre
                            code.bash $ apogeu create controller user
                        p Create the #[code app/controllers/users.js] module
                        pre
                            code.javascript
                                | const UsersController = {
                                | };
                                | module.exports = UsersController;

                    #middlewares.tabs-panel
                        h4 Middlewares
                        p #[a(href="http://expressjs.com/en/guide/writing-middleware.html") Middleware] functions are functions that have access to the request object (req), the response object (res), and the next function in the applicationâ€™s request-response cycle. In Apogeu, a service is a module with a singular name that ends in the "Middleware" convention and lives in the #[code app/middlewares] directory.
                        p Middlewares don't need to be required, just use #[code LogMiddleware] wherever you want.
                        p A middleware can be created with the #[code apogeu create middleware log] command:
                        pre
                            code.bash $ apogeu create middleware log
                        p Create the #[code app/middlewares/log.js] module
                        pre
                            code.javascript
                                | const LogMiddleware = (req, res, next) => {
                                |   next();
                                | };
                                | module.exports = LogMiddleware;

                    #routes.tabs-panel
                        h4 Routes
                        p Routing refers to the definition of application end points (URIs) and how they respond to client requests.
                        p In Apogeu, a route is a module that lives in the #[code config/routes.js].
                        pre
                            code.javascript
                                | // config/routes.js
                                |
                                | module.exports = {
                                |   'get /': HomepagesController.index,
                                |
                                |   'get /middleware': [LogMiddleware, HomepagesController.index],
                                |
                                |   '/users': [
                                |     {
                                |       method: 'get',
                                |       middlewares: [LogMiddleware],
                                |       controller: UsersController.list,
                                |     },
                                |     {
                                |       method: 'post',
                                |       controller: UsersController.create,
                                |     },
                                |   ],
                                |
                                |   '/users/:id': [
                                |     {
                                |       method: 'get',
                                |       controller: UsersController.findById,
                                |     },
                                |     {
                                |       method: 'put',
                                |       controller: UsersController.update,
                                |     },
                                |     {
                                |       method: 'delete',
                                |       controller: UsersController.delete,
                                |     },
                                |   ],
                                |
                                | };
                    #scaffold.tabs-panel
                        h4 Scaffold
                        p Scaffolding allows you to generate some basic interfaces. In Apogeu, scaffold lives in the #[code config/scaffold] directory.
                        ul.accordion(data-accordion data-allow-all-closed="true")
                            li.accordion-item(data-accordion-item)
                                a.accordion-title(href="#") config/scaffold/controller
                                .accordion-content(data-tab-content)
                                    p A controller can be created with the  #[code apogeu create controller model_name] command:
                                    pre
                                        code.bash $ apogeu create controller user
                                    p The scaffold will create the #[code app/controllers/users.js] module
                                    include ../../_includes/concepts/scaffold-controller

                            li.accordion-item(data-accordion-item)
                                a.accordion-title(href="#") config/scaffold/controllerCrud
                                .accordion-content(data-tab-content)
                                    p A controllerCrud can be created with the  #[code apogeu create controller model_name --crud] command:
                                    pre
                                        code.bash $ apogeu create controller user --crud
                                    p The scaffold will create the #[code app/controllers/users.js] module
                                    include ../../_includes/concepts/scaffold-controller-crud

                            li.accordion-item(data-accordion-item)
                                a.accordion-title(href="#") config/scaffold/middleware
                                .accordion-content(data-tab-content)
                                    p A middleware can be created with the  #[code apogeu create middleware model_name] command:
                                    pre
                                        code.bash $ apogeu create middleware log
                                    p The scaffold will create the #[code app/middlewares/log.js] module
                                    include ../../_includes/concepts/scaffold-middleware

                            li.accordion-item(data-accordion-item)
                                a.accordion-title(href="#") config/scaffold/model
                                .accordion-content(data-tab-content)
                                    p A model can be created with the  #[code apogeu create model model_name] command:
                                    pre
                                        code.bash $ apogeu create model user
                                    p The scaffold will create the #[code app/models/user.js] module
                                    include ../../_includes/concepts/scaffold-model

                            li.accordion-item(data-accordion-item)
                                a.accordion-title(href="#") config/scaffold/service
                                .accordion-content(data-tab-content)
                                    p A service can be created with the  #[code apogeu create service model_name] command:
                                    pre
                                        code.bash $ apogeu create service user
                                    p The scaffold will create the #[code app/services/users.js] module
                                    include ../../_includes/concepts/scaffold-service

                            li.accordion-item(data-accordion-item)
                                a.accordion-title(href="#") config/scaffold/serviceCrud
                                .accordion-content(data-tab-content)
                                    p A serviceCrud can be created with the  #[code apogeu create service model_name --crud] command:
                                    pre
                                        code.bash $ apogeu create service user --crud
                                    p The scaffold will create the #[code app/services/users.js] module
                                    include ../../_includes/concepts/scaffold-service-crud
                    #tests.tabs-panel
                        h4 Tests
                        p There are distinct structures for unit tests and integration tests.
                        p #[code .js] files inside #[code test/unit] folder are taken as unit tests, so they only have access to the app's structure.
                        p #[code .js] files inside #[code test/integration] folder are taken as integration tests, so the app is started before run the tests.
                        p Currently only mocha tests are comprehended by Apogeu.
                        pre
                            code.javascript
                                | const assert = require('assert');
                                |
                                | it('list users', (done) => {
                                |   UsersService.list({ limit: 1 })
                                |     .then((results) => {
                                |       assert.equal(results.length, 1);
                                |       done();
                                |     });
                                | });
