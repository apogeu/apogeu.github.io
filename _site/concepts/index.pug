extends ../../_layouts/default

block title
    +title('Concepts')

block content
    .concepts
        .menu-centered
            ul.menu
                li.active
                    a(href="/concepts") Concepts
                li
                    a(href="/structure") App structure
                li
                    a(href="/technology") Technology

        .row.collapse
            .medium-3.columns
                ul#concepts-tabs.tabs.vertical(data-tabs data-deep-link="true")
                    li.tabs-title.is-active
                        a(href="#cli") Command Line Interface
                    li.tabs-title
                        a(href="#models") Models
                    li.tabs-title
                        a(href="#services") Services
                    li.tabs-title
                        a(href="#controllers") Controllers
                    li.tabs-title
                        a(href="#middlewares") Middlewares
                    li.tabs-title
                        a(href="#routes") Routes
                    li.tabs-title
                        a(href="#views") Views
                    li.tabs-title
                        a(href="#scaffold") Scaffold
                    li.tabs-title
                        a(href="#tests") Tests

            .medium-9.columns
                .tabs-content.vertical(data-tabs-content="concepts-tabs")
                    #cli.tabs-panel.is-active
                        h4 Command Line Interface (CLI)
                        p In #{ apogeu }, all commands have the syntax with #[code apogeu command]
                        p Example:
                        pre
                            code.bash
                                | $ apogeu new my-project

                        p Display the command options with the -h option:
                        pre
                            code.bash
                                | $ apogeu -h
                                |
                                |Commands:
                                |  start                                                                 Start project
                                |  new [project_name]                                                    New project
                                |  create <type> [all|middleware|controller|service|model] <model_name>  Create model structure
                                |  test [test_type] [all|unit|integration]                               Run project tests
                                |
                                |Options:
                                |  --version, -v  Show version number  [boolean]
                                |  --help, -h     Show help  [boolean]
                        
                        hr
        
                        h5 Available Commands

                        ul.accordion(data-accordion data-allow-all-closed="true")
                            li.accordion-item(data-accordion-item)
                                a.accordion-title(href="#") apogeu start
                                .accordion-content(data-tab-content)
                                    p This command starts your application
                                    p You can simply run:
                                    pre
                                        code.bash
                                            |$ apogeu start
                                            |
                                            | info: Mongoose default connection open to mongodb://localhost:27017/apogeu
                                            | info: Mongoose default connection is open
                                            | info: Application listening on port 3000
                            li.accordion-item(data-accordion-item)
                                a.accordion-title(href="#") apogeu new
                                .accordion-content(data-tab-content)
                                    p For you to create a new application:
                                    pre
                                        code.bash
                                            |$ apogeu new my-project
                                            |
                                            | info: my-project app created
                                    p Or for you to create in the current folder
                                    pre
                                        code.bash
                                            |$ apogeu new
                            li.accordion-item(data-accordion-item)
                                a.accordion-title(href="#") apogeu create
                                .accordion-content(data-tab-content)
                                    p To create a model, service, controller or middleware, the #[code apogeu create] command is used.
                                    pre
                                        code.bash
                                            |$ apogeu create model user
                                            |
                                            | info: User structure created
                                    p You can also create all structures using #[code apogeu create all name]
                                    pre
                                        code.bash
                                            |$ apogeu create all user
                                            |
                                            | info: User structure created
                            li.accordion-item(data-accordion-item)
                                a.accordion-title(href="#") apogeu test
                                .accordion-content(data-tab-content)
                                    p To run the unit and/or integration tests, use the command #[code apogeu test]
                                    pre
                                        code.bash
                                            |$ apogeu test unit
                                            |
                                            |info: running unit tests
                                            |
                                            |  ✓ user service is an object
                                            |
                                            |  1 passing (7ms)
                                    p You can also create all tests using #[code apogeu test all]
                                    pre
                                        code.bash
                                            |$ apogeu test all
                                            |
                                            |info: Mongoose default connection open to mongodb://localhost:27017/apogeu
                                            |info: Mongoose default connection is open
                                            |info: running unit tests
                                            |
                                            |  ✓ user service is an object
                                            |
                                            |  1 passing (15ms)
                                            |
                                            |info: running integration tests
                                            |info: Application listening on port 3000
                                            |
                                            |Mongoose: users.find({}, { limit: undefined, skip: undefined, fields: {} })
                                            |  ✓ list users (438ms)
                                            |
                                            |  1 passing (443ms)
                            li.accordion-item(data-accordion-item)
                                a.accordion-title(href="#") apogeu <command> --debug
                                .accordion-content(data-tab-content)
                                    p Use the #[code --debug] option to display the entire process of some command.
                                    p Example with the new command:
                                    pre
                                        code.bash
                                            |$ apogeu new my-project --debug
                                            |
                                            |apogeu:apogeu init apogeu +0ms
                                            |apogeu:debug global.Promise = require("bluebird") +204ms
                                            |apogeu:new project name: my-project +3s
                                            |apogeu:createDir my-project +14ms
                                            |apogeu:download downloading sources +45ms
                                            |apogeu:createDir my-project/app/assets/images +2s
                                            |apogeu:createDir my-project/app/assets/javascripts +19ms
                                            |apogeu:createDir my-project/app/assets/stylesheets +3ms
                                            |apogeu:createDir my-project/app/controllers +4ms
                                            |apogeu:createDir my-project/app/i18n +7ms
                                            |apogeu:createDir my-project/app/middlewares +2ms
                                            |apogeu:createDir my-project/app/models +2ms
                                            |apogeu:createDir my-project/app/services +3ms
                                            |apogeu:createDir my-project/app/views +4ms
                                            |apogeu:createDir my-project/config +6ms
                                            |apogeu:createDir my-project/config/scaffold +91ms
                                            |apogeu:createDir my-project/public/stylesheets +11ms
                                            |apogeu:createDir my-project/test/integration +3ms
                                            |apogeu:createDir my-project/test/unit +1ms
                                            |apogeu:createPackage creating package file +272ms
                                            |apogeu:installDependencies installing app dependencies +3ms
                                            |apogeu:createDir my-project/node_modules +0ms
                                            |apogeu:installDependencies dependencies installed +1m
                                            |info: my-project app created
                    #models.tabs-panel
                        h4 Models
                        p A model module fulfills the #[b M] in the #[a(href="https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller") Model View Controller] (#[b M]VC) pattern and represents a persistent entity that is mapped onto an underlying database. In #{ apogeu } a model is a module with a plural name convention and lives in the #[code app/models] directory.
                        b Models don't need to be required, just use #[code UserModel] wherever you want.
                        p A model can be created with the #[code apogeu model model_name] command:
                        pre
                            code.bash $ apogeu create model user
                        p Create the #[code app/models/user.js] module
                        pre
                            code.javascript
                                | const mongoose = require('mongoose');
                                | const Schema = mongoose.Schema;
                                | const UserModel = new Schema({
                                | });
                                | module.exports = mongoose.model('User', UserModel);


                    #services.tabs-panel
                        h4 Services
                        p A service contains business logic that can be reused across a #{ apogeu } application. In #{ apogeu }, a service is a module with a plural name that ends in the "Service" convention and lives in the #[code app/services] directory.
                        b Services don't need to be required, just use #[code UsersService] wherever you want.
                        p A service can be created with the #[code apogeu create service model_name] command:
                        pre
                            code.bash $ apogeu create service user
                        p Create the #[code app/services/users.js] module
                        pre
                            code.javascript
                                | const UsersService = {
                                | };
                                | module.exports = UsersService;

                    #controllers.tabs-panel
                        h4 Controllers
                        p A controller fulfills the #[b C] in the #[a(href="https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller") Model View Controller] (MV#[b C]) pattern and is responsible for handling web requests. In #{ apogeu }, a service is a module with a plural name that ends in the "Controller" convention and lives in the #[code app/controllers] directory.
                        b Controllers don't need to be required, just use #[code UsersController] wherever you want.
                        p A controller can be created with the  #[code apogeu create controller model_name] command:
                        pre
                            code.bash $ apogeu create controller user
                        p Create the #[code app/controllers/users.js] module
                        pre
                            code.javascript
                                | const UsersController = {
                                | };
                                | module.exports = UsersController;

                    #middlewares.tabs-panel
                        h4 Middlewares
                        p #[a(href="http://expressjs.com/en/guide/writing-middleware.html") Middleware] functions are functions that have access to the request object (req), the response object (res), and the next function in the application’s request-response cycle. In #{ apogeu }, a service is a module with a singular name that ends in the "Middleware" convention and lives in the #[code app/middlewares] directory.
                        b Middlewares don't need to be required, just use #[code LogMiddleware] wherever you want.
                        p A middleware can be created with the #[code apogeu create middleware log] command:
                        pre
                            code.bash $ apogeu create middleware log
                        p Create the #[code app/middlewares/log.js] module
                        pre
                            code.javascript
                                | const LogMiddleware = (req, res, next) => {
                                |   next();
                                | };
                                | module.exports = LogMiddleware;

                    #routes.tabs-panel
                        h4 Routes
                        p Routing refers to the definition of application end points (URIs) and how they respond to client requests.
                        p In #{ apogeu }, a route is a module that lives in the #[code config/routes.js].
                        include ../../_includes/files/routes
                        
                    #views.tabs-panel
                        h4 Views
                        p For the views we use the Pug template engine.
                        p You can learn more about it in: #[a(href="https://pugjs.org" target="_blank") https://pugjs.org]
                        p In #{ apogeu }, the views that lives in the #[code app/views].

                    #scaffold.tabs-panel
                        h4 Scaffold
                        p Scaffolding allows you to generate some basic interfaces. In #{ apogeu }, scaffold lives in the #[code config/scaffold] directory.
                        ul.accordion(data-accordion data-allow-all-closed="true")
                            li.accordion-item(data-accordion-item)
                                a.accordion-title(href="#") config/scaffold/controller
                                .accordion-content(data-tab-content)
                                    p A controller is used with the  #[code apogeu create controller model_name] command:
                                    pre
                                        code.bash $ apogeu create controller user
                                    p The scaffold will create the #[code app/controllers/users.js] based on the next module:
                                    include ../../_includes/files/scaffold-controller

                            li.accordion-item(data-accordion-item)
                                a.accordion-title(href="#") config/scaffold/controllerCrud
                                .accordion-content(data-tab-content)
                                    p A controllerCrud is used with the  #[code apogeu create controller model_name --crud] command:
                                    pre
                                        code.bash $ apogeu create controller user --crud
                                    p The scaffold will create the #[code app/controllers/users.js] based on the next module:
                                    include ../../_includes/files/scaffold-controller-crud

                            li.accordion-item(data-accordion-item)
                                a.accordion-title(href="#") config/scaffold/middleware
                                .accordion-content(data-tab-content)
                                    p A middleware is used with the  #[code apogeu create middleware model_name] command:
                                    pre
                                        code.bash $ apogeu create middleware log
                                    p The scaffold will create the #[code app/middlewares/log.js] based on the next module:
                                    include ../../_includes/files/scaffold-middleware

                            li.accordion-item(data-accordion-item)
                                a.accordion-title(href="#") config/scaffold/model
                                .accordion-content(data-tab-content)
                                    p A model is used with the  #[code apogeu create model model_name] command:
                                    pre
                                        code.bash $ apogeu create model user
                                    p The scaffold will create the #[code app/models/user.js] based on the next module:
                                    include ../../_includes/files/scaffold-model

                            li.accordion-item(data-accordion-item)
                                a.accordion-title(href="#") config/scaffold/service
                                .accordion-content(data-tab-content)
                                    p A service is used with the  #[code apogeu create service model_name] command:
                                    pre
                                        code.bash $ apogeu create service user
                                    p The scaffold will create the #[code app/services/users.js] based on the next module:
                                    include ../../_includes/files/scaffold-service

                            li.accordion-item(data-accordion-item)
                                a.accordion-title(href="#") config/scaffold/serviceCrud
                                .accordion-content(data-tab-content)
                                    p A serviceCrud is used with the  #[code apogeu create service model_name --crud] command:
                                    pre
                                        code.bash $ apogeu create service user --crud
                                    p The scaffold will create the #[code app/services/users.js] based on the next module:
                                    include ../../_includes/files/scaffold-service-crud
                    #tests.tabs-panel
                        h4 Tests
                        p There are distinct structures for unit tests and integration tests.
                        p #[code .js] files inside #[code test/unit] folder are taken as unit tests, so they only have access to the app's structure.
                        p #[code .js] files inside #[code test/integration] folder are taken as integration tests, so the app is started before run the tests.
                        p Currently only mocha tests are comprehended by #{ apogeu }.
                        pre
                            code.javascript
                                | const assert = require('assert');
                                |
                                | it('list users', (done) => {
                                |   UsersService.list({ limit: 1 })
                                |     .then((results) => {
                                |       assert.equal(results.length, 1);
                                |       done();
                                |     });
                                | });
